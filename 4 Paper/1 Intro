\documentclass{article}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage[T1]{fontenc}
\usepackage{fontspec}
\usepackage{unicode-math}
\usepackage[english]{babel}
\usepackage{blindtext}
\usepackage{lipsum}
\usepackage{parskip}
\usepackage{setspace}
\usepackage{caption}
\usepackage{multicol}
\usepackage{hyperref}
\usepackage{float}
\usepackage{changepage}
\usepackage{longtable}
\usepackage{multirow}
\usepackage{ragged2e}
\usepackage[style=apa,backend=biber]{biblatex}
\usepackage[utf8x]{inputenc}
\usepackage{float}
\floatplacement{figure}{H} % forces figures to be placed at the correct location
\usepackage{xcolor} % Allow colors to be defined
\usepackage{enumerate} % Needed for markdown enumerations to work
\usepackage{geometry} % Used to adjust the document margins
\usepackage{amsmath} % Equations
\usepackage{amssymb} % Equations
\usepackage{textcomp} % defines textquotesingle

\title{Task Specific Planning with Numerical Inverse Kinematics \\for 6-Axis Arc Welding Robot ABB IRB 1410}

\date{November 2023}

\begin{document}

\maketitle
\hspace{1cm}
\setlength{\columnsep}{1cm}

\def\tablename{Table}

For a general n degree-of-freedom open chain with forward kinematics $T(θ), θ ∈ R n$, the inverse kinematics problem can be stated as follows: given a homogeneous transform $X ∈ SE(3)$, find solutions $θ$ that satisfy $T(θ) = X$. To highlight the main features of the inverse kinematics problem, let us examine the two-link planar open chain of Figure 6.1(a) as a motivational example. Considering only the position of the end-effector and ignoring its orientation, the forward kinematics can be expressed as:

\begin{center}
$
\begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} L1 cosθ1 + L2 cos(θ1 + θ2) \\ L1 sinθ1 + L2 sin(θ1 + θ2) \end{bmatrix}
$
\end{center}

\hspace{1cm}

\begin{multicols}{2}
\fontsize{10}{12}\selectfont

\section{Introduction}
A rigid multibody system consists of a set of rigid objects, called links, joined together by joints. Simple kinds of joints include revolute (rotational) and prismatic (translational) joints. It is also possible to work with more general types of joints, and thereby simulate non-rigid objects. Well-known applications of rigid multibodies include robotic arms as well as virtual skeletons for animation in computer graphics

\section{Method}
There are several methods for solving IK problems, coming originally from robotics applications. These include cyclic coordinate descent methods [43], pseudoinverse methods [45], Jacobian transpose methods [5, 46], the Levenberg-Marquardt damped least squares methods [41, 34], quasi-Newton and conjugate gradient methods [43, 49, 15], and neural net and artificial intelligence methods [19, 27, 36, 38, 20, 22, 40, 16].

\end{multicols}

\section{Preliminaries: Forward kinematics and Jacobians}
    \subsection{Nonlinear Mapping Between C-Space and
Workspace}\label{nonlinear-mapping-between-c-space-and-workspace}
The big challenge in inverse kinematics is that the mapping from configuration space to workspace is nonlinear. This means that straight lines in the joint space map to curves in the workspace, and vice versa. In other words, the direction of motion in workspace changes continuously as the configuration moves. The plots below show some examples for the 2R robot with unit lengths.

The significance of this is that we cannot simply use the tools of linear algebra to solve IK problems. We will need to use more sophisticated geometric and mathematical manipulations in order to find solutions. Moreover, whereas the solution to linear systems of equations may be unique points or linear subspaces of solutions, the solution to nonlinear equations can be multiple points, or even nonlinear manifolds.
\begin{figure}
    \centering
    \includegraphics[width=150mm,scale=0.9]{img/output_3_0.png}
    \caption{Caption}
    \label{fig:enter-label}
\end{figure}

\section{Numerical Inverse Kinematics}
Methods of optimization are needed in situations where an exact solution may not exist and we seek the closest approximate solution; or conversely, an infinity of inverse kinematics solutions exists (i.e. if the robot is kinematically redundant) and the article seeks a solution that is optimal with respect to some criterion. The article will now therefore discuss the Newton–Raphson method for nonlinear root-finding and also the first-order necessary conditions for optimization.

ABB IRB 1410 is a 6 DOF manipulator in 3D space. Thus, we have 8 possible solutions. We can practically map it to three configurations: Left-handed or right-handed, elbow up or down (above or below shoulder level) and wrist orientation. Since each of them have two possibilities, we get $2^3 = 8$ theoretical solutions to achieve the required end effector position orientation.

\begin{multicols}{2}
    \subsection{Newton–Raphson Method}\label{Newton–Raphson Method}
There exist a variety of iterative methods for finding the roots of a nonlinear equation, the article will use the Newton Raphson method. 
    \subsection{Numerical Inverse Kinematics Algorithm}\label{Numerical Inverse Kinematics Algorithm}
\end{multicols}

Let $f(x)$ be a smooth and continuous function and $x_r$ be an unknown root of $f(x)$. Now assume that $x_0$ is a guess for $x_r$. Unless $x_0$ is a very lucky guess, $f(x_0)$ will not be a root. Given this scenario, we want to find an $x_1$ that is an improvement on $x_0$ (i.e., closer to $x_r$ than $x_0$ ). If we assume that $x_0$ is “close enough” to $$x_r$$ , then we can improve upon it by taking the linear approximation of $f(x)$ around $x_0$, which is a line, and finding the intersection of this line with the x-axis. Written out, the linear approximation of $f(x)$ around $x_0$ is $f(x)≈f(x_0)+f′(x_0)(x−x0)$. Using this approximation, we find $x_1$ such that $f(x_1)=0$ . Plugging these values into the linear approximation results in the equation:
\begin{center}
$0=f(x_0)+f′(x_0)(x_1−x_0)$
\end{center}

which when solved for $x_1$ is $x_1=x_0−f(x_0)f′(x_0)$

\hspace{1cm}
\begin{figure}
    \centering
    \includegraphics[width=150mm,scale=0.9]{img/newtonraphsongraph.JPG}
    \caption{Caption}
    \label{fig:enter-label}
\end{figure}

$$
0 = f(x_0) + f^{\prime}(x_0)(x_1-x_0),
$$
which when solved for $x_1$ is
$$
x_1 = x_0 - \frac{f(x_0)}{f^{\prime}(x_0)}.
$$




\end{document}


